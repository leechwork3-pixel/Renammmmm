import asyncio
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery

from helper.database import Element_Network
from config import Config, Txt


@Client.on_message(filters.private & filters.command("start"))
async def start_handler(client: Client, message: Message):
    user = message.from_user
    await Element_Network.add_user(user.id)

    # Animated intro
    m = await message.reply_text("‚òéÔ∏è")
    await asyncio.sleep(0.5)
    await m.edit_text("<code>D·¥á·¥†…™ ü ·¥ç·¥Ä è ·¥Ñ Ä è...</code>")
    await asyncio.sleep(0.4)
    await m.edit_text("‚ö°")
    await asyncio.sleep(0.5)
    await m.edit_text("<code>J·¥Ä·¥Ñ·¥ã·¥ò·¥è·¥õ!!!</code>")
    await asyncio.sleep(0.4)
    await m.delete()

    await message.reply_sticker("CAACAgQAAxkBAAIOsGf5RIq9Zodm25_NfFJGKNFNFJv5AALHGAACukfIUwkk20UPuRnvNgQ")

    buttons = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Ä¢ ·¥ç è ·¥Ä ü ü ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ‚Ä¢", callback_data='help')],
        [InlineKeyboardButton("‚Ä¢ ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ‚Ä¢", callback_data='premiumx')],
        [InlineKeyboardButton('‚Ä¢ ·¥Ö·¥á·¥†', url='https://t.me/Shadow_Blank'),
         InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚Ä¢', url='https://t.me/manga_campus_chat')],
        [InlineKeyboardButton('‚Ä¢ ·¥Ä ô·¥è·¥ú·¥õ', callback_data='about')]
    ])

    if Config.START_PIC:
        await message.reply_photo(
            Config.START_PIC,
            caption=Txt.START_TXT.format(user.mention),
            reply_markup=buttons
        )
    else:
        await message.reply_text(
            Txt.START_TXT.format(user.mention),
            reply_markup=buttons,
            disable_web_page_preview=True
        )


@Client.on_callback_query()
async def callback_handler(client: Client, query: CallbackQuery):
    data = query.data
    user_mention = query.from_user.mention

    if data == "home":
        await query.message.edit_text(
            Txt.START_TXT.format(user_mention),
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Ä¢ ·¥ç è ·¥Ä ü ü ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ‚Ä¢", callback_data='help')],
                [InlineKeyboardButton("‚Ä¢ ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ‚Ä¢", callback_data='premiumx')],
                [InlineKeyboardButton('‚Ä¢ ·¥Ö·¥á·¥†', url='https://t.me/Shadow_Blank'),
                 InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚Ä¢', url='https://t.me/manga_campus_chat')],
                [InlineKeyboardButton('‚Ä¢ ·¥Ä ô·¥è·¥ú·¥õ', callback_data='about'),
                 InlineKeyboardButton('s·¥è·¥ú Ä·¥Ñ·¥á ‚Ä¢', callback_data='source')]
            ])
        )

    elif data == "help":
        await query.message.edit_text(
            Txt.HELP_TXT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Ä¢ ·¥Ä·¥ú·¥õ·¥è  Ä·¥á…¥·¥Ä·¥ç·¥á “ì·¥è Ä·¥ç·¥Ä·¥õ ‚Ä¢", callback_data='file_names')],
                [InlineKeyboardButton("‚Ä¢ s·¥á«´·¥ú·¥á…¥·¥Ñ·¥á “ì…™ ü·¥ás ‚Ä¢", callback_data='sequence_help')],
                [InlineKeyboardButton('‚Ä¢ ·¥õ ú·¥ú·¥ç ô…¥·¥Ä…™ ü', callback_data='thumbnail'),
                 InlineKeyboardButton('·¥Ñ·¥Ä·¥ò·¥õ…™·¥è…¥ ‚Ä¢', callback_data='caption')],
                [InlineKeyboardButton('‚Ä¢ ·¥ç·¥á·¥õ·¥Ä·¥Ö·¥Ä·¥õ·¥Ä', callback_data='meta'),
                 InlineKeyboardButton('·¥Ö·¥è…¥·¥Ä·¥õ·¥á ‚Ä¢', callback_data='donate')],
                [InlineKeyboardButton('‚Ä¢  ú·¥è·¥ç·¥á', callback_data='home')]
            ])
        )

    elif data == "caption":
        await query.message.edit_text(
            Txt.CAPTION_TXT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Ä¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ", url='https://t.me/manga_campus_chat'),
                 InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="help")]
            ])
        )

    elif data == "premiumx":
        await query.message.edit_text(
            Txt.PREMIUM_TXT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üíé Upgrade", url=Config.SUPPORT_CHAT),
                 InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="home")],
            ])
        )

    elif data == "about":
        await query.message.edit_text(
            Txt.ABOUT_TXT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üì° Source", callback_data="source")],
                [InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="home")]
            ])
        )

    elif data == "donate":
        await query.message.edit_text(
            Txt.DONATE_TXT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí∞ Donate", url='https://t.me/Shadow_Blank')],
                [InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="help")]
            ])
        )

    elif data == "file_names":
        await query.message.edit_text(
            Txt.FILENAME_TXT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="help")]
            ])
        )

    elif data == "thumbnail":
        await query.message.edit_text(
            Txt.THUMBNAIL_TXT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="help")]
            ])
        )

    elif data == "sequence_help":
        await query.message.edit_text(
            Txt.SEQUENCE_TXT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="help")]
            ])
        )

    elif data == "meta":
        await query.message.edit_text(
            Txt.METADATA_TXT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="help")]
            ])
        )

    elif data == "source":
        await query.message.edit_text(
            Txt.SOURCE_TXT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="about")]
            ])
        )

    elif data == "close":
        try:
            await query.message.delete()
            if query.message.reply_to_message:
                await query.message.reply_to_message.delete()
        except Exception:
            pass
            
